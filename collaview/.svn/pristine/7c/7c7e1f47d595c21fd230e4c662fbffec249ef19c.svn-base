package egovframework.web;

import java.lang.reflect.Field;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.mysql.cj.xdevapi.JsonArray;
import com.mysql.cj.xdevapi.JsonValue;

import egovframework.service.BoardService;
import egovframework.service.BoardVO;
import egovframework.service.ChannelService;
import egovframework.service.ChannelVO;
import egovframework.service.EgovCvService;
import egovframework.service.FileVO;


@Controller
public class BoardController {
	
	/** VideoService*/
	@Resource(name = "boardService")
	private BoardService boardService;
	
	@Resource(name = "egovCvService")
	private EgovCvService egovCvService;
	
    // 게시글 목록 페이지
	@GetMapping("/board_list.do")
    public String boardList(Model model,
    		@RequestParam(name = "boardPage", defaultValue = "1") int boardPage,
			@RequestParam(name = "boardPageSize", defaultValue = "10") int boardPageSize
	) {
		List<BoardVO> boardList = boardService.selectBoardList(boardPage, boardPageSize);
	    JSONArray jsonArray = new JSONArray();
	    JSONObject data = new JSONObject();
	    for (BoardVO vo : boardList) {
	        JSONObject jsonObject = voToJson(vo); // VO 객체를 JSON으로 변환7
        	jsonArray.add(jsonObject);
	    }
	    data.put("1", jsonArray);
	    model.addAttribute("data", data);
        return "board/BoardList";
    }
	
	@GetMapping("/board_insert.do")
	public String board_insert(HttpSession session, Model model) {
		HashMap userData = (HashMap)session.getAttribute("userData");
	    String id = null;
	    if (userData != null && userData.get("id") != null) {
	        id = userData.get("id").toString();
	    }
		List<ChannelVO> channelList = boardService.selectChannelList(id);
		model.addAttribute("channelList", channelList);
		return "board/BoardInsert";
	}
	
	@ResponseBody
	@Transactional(rollbackFor = Exception.class)
	@PostMapping("/board_insert.do")
	public String board_insertPost(HttpSession session, BoardVO boardVO, MultipartFile file[]) {
		HashMap userData = (HashMap)session.getAttribute("userData");
	    String id = null;
	    if (userData != null && userData.get("id") != null) {
	        id = userData.get("id").toString();
	    }
	    else {
	    	return "notLogin";
	    }
	    boardVO.setUser(id);
		
	    
//	    게시물 등록
		int res = boardService.insertBoard(boardVO);
		
//		등록한 게시물의 idx
		int lastPostIdx = boardService.selectLastPost(boardVO);
		
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyMMddHHmmss");
		
		FileVO fileVO = new FileVO();
		
//		table = board | num = 마지막 게시물 고정
		fileVO.setTable("board");
		fileVO.setNum(lastPostIdx);
		fileVO.setUser(id);
//		
//		파일등록
		for(MultipartFile f : file) {
			fileVO.setOrigin_name(f.getOriginalFilename());
			fileVO.setFile_name(f.getOriginalFilename() + "_" + sdf.format(date));
			egovCvService.insertFile(fileVO);
		}
		if(res != 0) {
			return "success";
		}
		else {
			return "fail";
		}
	}
	
    
    // VO 객체를 JSONObject로 자동 변환하는 메서드
    private JSONObject voToJson(Object vo) {
        JSONObject jsonObject = new JSONObject();
        try {
            for (Field field : vo.getClass().getDeclaredFields()) {
                field.setAccessible(true); // private 필드 접근 허용
                jsonObject.put(field.getName(), field.get(vo)); // 키: 필드명, 값: 필드 값
            }
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        return jsonObject;
    }
    
    // object 객체를 list 형태로 변환
    private List<?> objectToList(Object obj){
        List<Object> resultList = new ArrayList<>();

        if (obj == null) {
            return resultList; // null이면 빈 리스트 반환
        }

        if (obj instanceof List<?>) {
            return (List<?>) obj; // 이미 List<?>이면 그대로 반환
        } else if (obj instanceof String) {
            // GET 방식에서 "1,2,3" 형태로 들어왔을 경우 변환
            return Arrays.asList(((String) obj).split(","));
        }

        return resultList;
    }
}